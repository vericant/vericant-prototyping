// Typography
// Font size
@mixin font-size($sizeValue: 1.6) {
  font-size: strip-unit(rem-calc(($sizeValue * 10))) + px;
  font-size: strip-unit(rem-calc($sizeValue)) + rem;
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

//Rem Fallback
// @param {String} $property - property to manipulate
// @param {Number} $values - values to apply
@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

// Responsive lazy load padding trick
$intrinsic-ratio: 16/9 !default;
$intrinsic-ratio-width: 100% !default;
$intrinsic-ratio-elements: '> *' !default;
$intrinsic-ratio-extend: true !default;
$intrinsic-ratio-direction: bottom !default;

@mixin intrinsic-ratio-parent($extend: $intrinsic-ratio-extend) {
    @if $extend {
      @extend %intrinsic-ratio-parent;
    }
    @else {
      display: block;
      position: relative;
      height: 0;
    }
}

@mixin intrinsic-ratio-child($extend: $intrinsic-ratio-extend) {
  @if $extend {
    @extend %intrinsic-ratio-child;
  }
  @else {
    display: block;
    position: absolute;
    width: 100%; // !important Nuke the external styles
    height: 100%; // !important Nuke the external styles
    top: 0;
    margin: 0;
    padding: 0;
  }
}

@mixin intrinsic-ratio-ratio($ratio: $intrinsic-ratio, $width: $intrinsic-ratio-width, $direction: $intrinsic-ratio-direction) {
  padding-#{$direction}: (1 / $ratio) * $width;
  width: $width;
}

@mixin intrinsic-ratio($ratio: $intrinsic-ratio, $width: $intrinsic-ratio-width, $elements: $intrinsic-ratio-elements, $extend: $intrinsic-ratio-extend, $direction: $intrinsic-ratio-direction) {
  @include intrinsic-ratio-parent($extend);
  @include intrinsic-ratio-ratio($ratio, $width, $direction);

  @each $element in $elements {
    #{$element} {
       @include intrinsic-ratio-child($extend);
    }
  }
}

@mixin fixed-ratiobox($ratio: $intrinsic-ratio, $width: $intrinsic-ratio-width, $elements: $intrinsic-ratio-elements, $extend: $intrinsic-ratio-extend, $direction: $intrinsic-ratio-direction) {
  @include intrinsic-ratio($ratio, $width, $elements, $extend, $direction);
}

%intrinsic-ratio-parent {
  @include intrinsic-ratio-parent(false);
}

%intrinsic-ratio-child {
  @include intrinsic-ratio-child(false);
}
